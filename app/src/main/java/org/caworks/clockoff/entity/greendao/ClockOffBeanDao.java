package org.caworks.clockoff.entity.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ClockOff".
*/
public class ClockOffBeanDao extends AbstractDao<ClockOffBean, Long> {

    public static final String TABLENAME = "ClockOff";

    /**
     * Properties of entity ClockOffBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Desc = new Property(2, String.class, "desc", false, "DESC");
        public final static Property Note = new Property(3, String.class, "note", false, "NOTE");
        public final static Property Start = new Property(4, String.class, "start", false, "START");
        public final static Property Remind = new Property(5, String.class, "remind", false, "REMIND");
        public final static Property Record = new Property(6, String.class, "record", false, "RECORD");
        public final static Property Complete = new Property(7, String.class, "complete", false, "COMPLETE");
        public final static Property Repair = new Property(8, String.class, "repair", false, "REPAIR");
    }


    public ClockOffBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ClockOffBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ClockOff\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"DESC\" TEXT," + // 2: desc
                "\"NOTE\" TEXT," + // 3: note
                "\"START\" TEXT," + // 4: start
                "\"REMIND\" TEXT," + // 5: remind
                "\"RECORD\" TEXT," + // 6: record
                "\"COMPLETE\" TEXT," + // 7: complete
                "\"REPAIR\" TEXT);"); // 8: repair
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ClockOff\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ClockOffBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(3, desc);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(4, note);
        }
 
        String start = entity.getStart();
        if (start != null) {
            stmt.bindString(5, start);
        }
 
        String remind = entity.getRemind();
        if (remind != null) {
            stmt.bindString(6, remind);
        }
 
        String record = entity.getRecord();
        if (record != null) {
            stmt.bindString(7, record);
        }
 
        String complete = entity.getComplete();
        if (complete != null) {
            stmt.bindString(8, complete);
        }
 
        String repair = entity.getRepair();
        if (repair != null) {
            stmt.bindString(9, repair);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ClockOffBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(3, desc);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(4, note);
        }
 
        String start = entity.getStart();
        if (start != null) {
            stmt.bindString(5, start);
        }
 
        String remind = entity.getRemind();
        if (remind != null) {
            stmt.bindString(6, remind);
        }
 
        String record = entity.getRecord();
        if (record != null) {
            stmt.bindString(7, record);
        }
 
        String complete = entity.getComplete();
        if (complete != null) {
            stmt.bindString(8, complete);
        }
 
        String repair = entity.getRepair();
        if (repair != null) {
            stmt.bindString(9, repair);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ClockOffBean readEntity(Cursor cursor, int offset) {
        ClockOffBean entity = new ClockOffBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // desc
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // note
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // start
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // remind
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // record
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // complete
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // repair
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ClockOffBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDesc(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNote(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStart(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRemind(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRecord(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setComplete(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRepair(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ClockOffBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ClockOffBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ClockOffBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
